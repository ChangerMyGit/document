分工、同步、互斥
Java 内存模型 ：
可见性 ：禁用缓存、多核下的寄存器导致主存的数据不能保持可见性
原子性 ：一条程序可能会拆分多条指令，不是一个原子操作
有序性 ：指令重排序
volatile 禁用缓存、重排序，保证可见性和有序性
happens-before 原则 6大原则
原子性的源头是线程切换
互斥锁 ：锁一定要有一个对象，与资源来进行绑定
互斥锁优化 ：锁粒度 根据业务控制
死锁 ：申请多个锁锁定多个资源的时候，会出现死锁得的可能性。解决方案 ：1 破坏占用资源及等待条件 ：一次性申请所有资源 2 按照顺序申请资源
用等待通知优化轮询方案 ：线程获取互斥锁，发现要求的条件不满足，释放锁进入等待状态；当条件满足时通知等待的线程，再次获取锁
使用方法 wait()、notify()、notifyAll() 必须和synchroniezd 同时使用
while(条件不满足) {
  wait();
}

并发编程要注意的问题 ：
安全性 ：原子性、可见性、有序性 实现方式 ：互斥 锁 竞态条件 多个线程安全的方法一起使用也不是线程安全的
活跃性 ：死锁、活锁（随机时间）、饥饿（线程无法获取资源，公平锁）
性能 ：无锁算法（局部变量、乐观锁、CAS算法、减少锁的时间）

并发工具：
Lock 和 Condition
Lock 互斥
Lock的优点：

// 支持中断的 API
void lockInterruptibly() 
  throws InterruptedException;
// 支持超时的 API
boolean tryLock(long time, TimeUnit unit) 
  throws InterruptedException;
// 支持非阻塞获取锁的 API
boolean tryLock();


Condition 同步
